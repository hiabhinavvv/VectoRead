# Name for your GitHub Actions workflow
name: CI/CD - Build, Push, and Deploy

# This workflow runs automatically on any push event to the "main" branch.
on:
  push:
    branches: [ "main" ]

# A workflow run is made up of one or more jobs.
jobs:
  # --- CONTINUOUS INTEGRATION JOB ---
  build-and-push:
    name: Build and Push Docker Images
    # The type of virtual machine to run the job on.
    runs-on: ubuntu-latest

    # A job is a sequence of steps
    steps:
      # Step 1: Checks out your repository code so the job can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Log in to Docker Hub using secrets
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 3: Build and push the Backend image
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          dockerfile: ./backend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/vectoread-backend:latest

      # Step 4: Build and push the Frontend image
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          dockerfile: ./frontend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/vectoread-frontend:latest

  # --- CONTINUOUS DEPLOYMENT JOB ---
  deploy:
    name: Deploy to Production Server
    # This job will only run if the 'build-and-push' job completes successfully
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to Server
        # This is a placeholder for your deployment step.
        # You would typically use an action that can SSH into your server.
        # The 'appleboy/ssh-action' is a very popular choice for this.
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }} # e.g., your server's IP address
          username: ${{ secrets.SERVER_USERNAME }} # e.g., 'ubuntu' or 'root'
          key: ${{ secrets.SSH_PRIVATE_KEY }} # Your server's private SSH key
          script: |
            # These are the commands that will run on your production server
            echo "Starting deployment..."
            cd /path/to/your/project # Navigate to your project directory on the server
            
            # Pull the latest images that were just pushed to Docker Hub
            docker-compose pull
            
            # Restart the services with the new images
            docker-compose up -d --force-recreate
            
            echo "Deployment successful!"