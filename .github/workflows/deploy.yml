name: CI/CD - Deploy Frontend and Backend

on:
  push:
    branches: [ "main" ]

jobs:
  # --- JOB 1: DEPLOY FRONTEND TO VERCEL ---
  # --- JOB 1: DEPLOY FRONTEND TO VERCEL (Corrected) ---
  deploy-frontend:
    name: Deploy Frontend to Vercel
    runs-on: ubuntu-latest
    # This job will only run if the 'build-and-push-images' job is successful
    needs: build-and-push-images

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Pull Vercel Project Settings
        # This is the most important step. It uses your secrets to download
        # the project configuration and link this CI environment to your
        # existing VectoRead project on Vercel.
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./frontend

      - name: Build Project Artifacts
        # Now that the project is linked, this command will build for the correct project.
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./frontend

      - name: Deploy Project to Vercel
        # This command deploys the prebuilt artifacts to the now-linked project.
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
        working-directory: ./frontend

  # --- JOB 2: DEPLOY BACKEND TO HUGGING FACE ---
  deploy-backend:
    name: Deploy Backend to Hugging Face
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        # We need to fetch the full history for git subtree to work correctly
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Push to Hugging Face Space
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          
          # Step 1: Create a new temporary branch from the 'backend' subdirectory's history
          git subtree split --prefix backend -b temp-backend-branch
          
          # Step 2: Force push that new temporary branch to the 'main' branch on the Hugging Face remote
          # This overwrites the history on the Space, ensuring a clean deployment every time.
          git push --force https://${{ secrets.HF_USERNAME }}:${HF_TOKEN}@huggingface.co/spaces/${{ secrets.HF_USERNAME }}/${{ secrets.HF_SPACE_NAME }} temp-backend-branch:main
